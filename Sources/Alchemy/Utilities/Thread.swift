import NIO

/// A utility for running expensive CPU work on threads so as not to
/// block the current `EventLoop`.
public struct Thread {
    /// The apps main thread pool for running expensive work.
    @Inject public static var pool: NIOThreadPool
    
    /// Runs an expensive bit of work on a thread that isn't backing
    /// an `EventLoop`, returning any value generated by that work
    /// back on the current `EventLoop`.
    ///
    /// - Parameter task: The work to run.
    /// - Returns: The result of the expensive work that completes on
    ///   the current `EventLoop`.
    public static func run<T>(_ task: @Sendable @escaping () throws -> T) async throws -> T {
        try await pool.runIfActive(eventLoop: Loop, task).get()
    }
}
